def helmInstall (namespace, release) {
    echo "Installing ${release} in ${namespace}"

    script {
        release = "${release}-${namespace}"
        sh """
            helm upgrade --install --namespace ${namespace} ${release} \
                --set image.repository=${DOCKER_REG}/${DOCKER_REPO}/${IMAGE_NAME},image.tag=${DOCKER_TAG} ./helm
        """
        sh "sleep 5"
    }
}

def helmDelete (namespace, release) {
    echo "Deleting ${release} in ${namespace} if deployed"

    script {
        release = "${release}-${namespace}"
        sh "[ -z \"\$(helm ls --short ${release} 2>/dev/null)\" ] || helm delete --purge ${release}"
    }
}


def curlRun (url, out) {
    echo "Running curl on ${url}"

    script {
        if (out.equals('')) {
            out = 'http_code'
        }
        echo "Getting ${out}"
            def result = sh (
                returnStdout: true,
                script: "curl --output /dev/null --silent --connect-timeout 5 --max-time 5 --retry 5 --retry-delay 5 --retry-max-time 30 --write-out \"%{${out}}\" ${url}"
        )
        echo "Result (${out}): ${result}"
    }
}

def curlTest (namespace, out) {
    echo "Running tests in ${namespace}"

    script {
        if (out.equals('')) {
            out = 'http_code'
        }

        def svc_ip = sh (
                returnStdout: true,
                script: "kubectl get svc -n ${namespace} | grep ${ID} | awk '{print \$3}'"
        )

        if (svc_ip.equals('')) {
            echo "ERROR: Getting service IP failed"
            sh 'exit 1'
        }

        echo "svc_ip is ${svc_ip}"
        url = 'http://' + svc_ip

        curlRun (url, out)
    }
}

pipeline {

    options {
        timeout(time: 60, unit: 'MINUTES')
    }

    environment {
        IMAGE_NAME = 'docker-mysql-spring-boot-example'
        TEST_LOCAL_PORT = 8086
        DEPLOY_PROD = false
    }

    parameters {
        string (name: 'GIT_BRANCH',           defaultValue: 'develop',  description: 'Git branch to build')
        booleanParam (name: 'DEPLOY_TO_PROD', defaultValue: false,     description: 'Deploy production without approval')
        string (name: 'BUILD_DIR',       defaultValue: '.',          description: 'Docker registry')
        string (name: 'DOCKER_REG',       defaultValue: 'registry.gitlab.com',          description: 'Docker registry')
        string (name: 'DOCKER_REPO',       defaultValue: 'zukokolkka',          description: 'Docker registry')
        string (name: 'DOCKER_TAG',       defaultValue: 'dev',                                     description: 'Docker tag')
        string (name: 'DOCKER_USR',       defaultValue: 'zukokolkka',                              description: 'Your docker repository user')
        // Temporary API token
        string (name: 'DOCKER_PSW',       defaultValue: 'BWu3vLArAu4TVETs_EqE',                    description: 'Your docker repository password')
    }
    agent { node { label 'master' } }

    // Pipeline stages
    stages {

        ////////// Step 1 //////////

        stage('Git clone and setup') {
            steps {
                git branch: "develop",
                        credentialsId: 'solovyevt',
                        url: 'https://github.com/solovyevt/docker-mysql-spring-boot-example'

                sh "kubectl cluster-info"

                echo "DOCKER_REG is ${DOCKER_REG}"
                //echo "HELM_REPO  is ${HELM_REPO}"

                script {
                    branch = GIT_BRANCH.replaceAll('/', '-').replaceAll('\\*', '-')
                    ID = "${IMAGE_NAME}-${DOCKER_TAG}-${branch}"

                    echo "Global ID set to ${ID}"
                }
            }
        }

        ////////// Step 2 //////////

        stage('Build and tests') {
            steps {
                echo "Building application and Docker image"
                sh "./mvnw clean package -DskipTests"
                sh 'docker login -u ${DOCKER_USR} -p ${DOCKER_PSW} ${DOCKER_REG}/${DOCKER_REPO}'
                sh 'docker build --pull -t ${DOCKER_REG}/${DOCKER_REPO}/${IMAGE_NAME}:${DOCKER_TAG} ${BUILD_DIR}'

                echo "Running tests"

                sh "[ -z \"\$(docker ps -a | grep ${ID} 2>/dev/null)\" ] || docker rm -f ${ID}"

                echo "Starting ${IMAGE_NAME} container"
                sh "docker run -dit --name ${ID} --rm --publish ${TEST_LOCAL_PORT}:80 ${DOCKER_REG}/${DOCKER_REPO}/${IMAGE_NAME}:${DOCKER_TAG} bash"

                script {
                    host_ip = sh(returnStdout: true, script: '/sbin/ip route | awk \'/default/ { print $3 ":${TEST_LOCAL_PORT}" }\'')
                }
            }
            stage('Development tests') {
                        parallel {
                            stage('Curl http_code') {
                                steps {
                                    curlTest (namespace, 'http_code')
                                }
                            }
                            stage('Curl total_time') {
                                steps {
                                    curlTest (namespace, 'time_total')
                                }
                            }
                            stage('Curl size_download') {
                                steps {
                                    curlTest (namespace, 'size_download')
                                }
                            }
                        }
                    }
        }

        ////////// Step 3 //////////

        stage('Publish Docker and Helm') {
            steps {
                echo "Stop and remove container"
                sh "docker stop ${ID} || true"

                echo "Pushing ${DOCKER_REG}/${IMAGE_NAME}:${DOCKER_TAG} image to registry"
                sh 'docker login -u ${DOCKER_USR} -p ${DOCKER_PSW} ${DOCKER_REG}/${DOCKER_REPO}'
                sh 'docker push ${DOCKER_REG}/${DOCKER_REPO}/${IMAGE_NAME}:${DOCKER_TAG}'

            }
        }

        ////////// Step 4 //////////

        stage('Deploy to dev') {
            steps {
                script {
                    namespace = 'development'

                    echo "Deploying application ${ID} to ${namespace} namespace"
                    //createNamespace (namespace)

                    // Remove release if exists
                    helmDelete (namespace, "${ID}")

                    // Deploy with helm
                    echo "Deploying"
                    helmInstall(namespace, "spring-boot-example-develop")
                }
            }
        }

        stage('Cleanup dev') {
            steps {
                script {
                    // Remove release if exists
                    helmDelete (namespace, "${ID}")
                }
            }
        }

        ////////// Step 5 //////////

        stage('Deploy to staging') {
            steps {
                script {
                    namespace = 'staging'

                    echo "Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace"
                    createNamespace (namespace)

                    // Remove release if exists
                    helmDelete (namespace, "${ID}")

                    // Deploy with helm
                    echo "Deploying"
                    helmInstall (namespace, "${ID}")
                }
            }
        }

        stage('Staging tests') {
            parallel {
                stage('Curl http_code') {
                    steps {
                        curlTest (namespace, 'http_code')
                    }
                }
                stage('Curl total_time') {
                    steps {
                        curlTest (namespace, 'time_total')
                    }
                }
                stage('Curl size_download') {
                    steps {
                        curlTest (namespace, 'size_download')
                    }
                }
            }
        }

        stage('Cleanup staging') {
            steps {
                script {
                    // Remove release if exists
                    helmDelete (namespace, "${ID}")
                }
            }
        }

        ////////// Step 6 //////////
        stage('Go for Production?') {
            when {
                allOf {
                    environment name: 'GIT_BRANCH', value: 'master'
                    environment name: 'DEPLOY_TO_PROD', value: 'false'
                }
            }

            steps {
                // Prevent any older builds from deploying to production
                milestone(1)
                input 'Proceed and deploy to Production?'
                milestone(2)

                script {
                    DEPLOY_PROD = true
                }
            }
        }

        stage('Deploy to Production') {
            when {
                anyOf {
                    expression { DEPLOY_PROD == true }
                    environment name: 'DEPLOY_TO_PROD', value: 'true'
                }
            }

            steps {
                script {
                    DEPLOY_PROD = true
                    namespace = 'production'

                    echo "Deploying application ${IMAGE_NAME}:${DOCKER_TAG} to ${namespace} namespace"
                    createNamespace (namespace)

                    echo "Deploying"
                    helmInstall (namespace, "${ID}")
                }
            }
        }
        stage('Production tests') {
            when {
                expression { DEPLOY_PROD == true }
            }

            parallel {
                stage('Curl http_code') {
                    steps {
                        curlTest (namespace, 'http_code')
                    }
                }
                stage('Curl total_time') {
                    steps {
                        curlTest (namespace, 'time_total')
                    }
                }
                stage('Curl size_download') {
                    steps {
                        curlTest (namespace, 'size_download')
                    }
                }
            }
        }
    }
}